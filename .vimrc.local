let g:spf13_use_old_powerline=1
set nospell

"Theme
syntax on
colorscheme  tender
"colorscheme Tomorrow-Night
let g:airline_theme = 'simple'
"let g:airline_left_sep=''
"let g:airline_right_sep=''


"Python Mode
let g:pymode = 1
let g:pymode_warnings = 1
let g:pymode_options = 1
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 1
let g:pymode_indent = 1
let g:pymode_virtualenv = 1
let g:pymode_run = 1
let g:pymode_run_bind = "<C-b>"
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_ignore = "E501,W"


" NERDTree
"
"Error detected while processing ColorScheme Auto commands for "*":
"E121: Undefined variable: g:colors_name
"E15: Invalid expression: g:colors_name != "solarized" | silent! aunmenu
"Solarized | else | call SolarizedMenu() | endif
"
"


" nerdtree git

"let g:NERDTreeUseSimpleIndicator = 1

"set autoread
"au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

" devIcon

let g:airline_powerline_fonts=1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif

  " unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = '‚ò∞'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
"let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

" powerline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'
"let g:airline#extensions#whitespace#enabled = 0
"let g:airline#extensions#syntastic#enabled = 1
  " old vim-powerline symbols
let g:airline_left_sep = '‚ÆÄ'
let g:airline_left_alt_sep = '‚ÆÅ'
let g:airline_right_sep = '‚ÆÇ'
let g:airline_right_alt_sep = '‚ÆÉ'
"  let g:airline_symbols.branch = '‚≠†'
"  let g:airline_symbols.readonly = '‚≠§'
"  let g:airline_symbols.linenr = '‚≠°'

"let g:webdevicons_enable = 1
"let g:webdevicons_enable_nerdtree = 1
"let g:webdevicons_conceal_nerdtree_brackets = 0
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11
" set guifont=Inconsolata\ for\ Powerline:h15
"set encoding=utf-8


" GitGutter
let g:gitgutter_avoid_cmd_prompt_on_windows = 0
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow"


" Unable folding

set nofoldenable                " disable code folding
let g:DisableAutoPHPFolding = 1 " disable PIV's folding

" indent_guides {
"if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
"            let g:indent_guides_start_level = 3
"            let g:indent_guides_guide_size = 1
"            let g:indent_guides_enable_on_vim_startup = 1
"            let g:indent_guides_auto_colors = 0
"            let g:indent_guides_auto_colors = 0
"            autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"            autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"           let g:indent_guides_color_change_percent = 10
"            let g:indent_guides_soft_pattern = '|'
" endif
"    " }
 
" disabe vim-indent-guides 
let g:indent_guides_enable_on_vim_startup=1

" indentLine

let g:indentLine_setColors = 1
let g:indentLine_char = '¬¶'


" snipmate

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
"
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" YCM

let g:enable_ycm_at_startup = 0

" FastFold

let g:fastfold_savehook = 0

" DevIcons

" devIcon

"if exists("g:loaded_webdevicons")
"        call webdevicons#refresh()
"endif
"let g:airline_powerline_fonts = 1
"let g:webdevicons_enable = 1
"let g:webdevicons_enable_nerdtree = 1
"let g:webdevicons_enable_unite = 1
"let g:webdevicons_enable_vimfiler = 0
"let g:webdevicons_enable_airline_tabline = 1
"let g:webdevicons_enable_airline_statusline = 1
"let g:webdevicons_enable_ctrlp = 0
"let g:webdevicons_enable_flagship_statusline = 0
"let g:WebDevIconsUnicodeDecorateFileNodes = 0
"set encoding=utf-8

" vim-devicon begins
 let g:webdevicons_conceal_nerdtree_brackets = 1
 let g:webdevicons_enable_nerdtree = 1
" vim-devicon ends

" nerdtree begins
function! s:CloseIfOnlyNerdTreeLeft()
    if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
           if winnr("$") == 1
                q
            endif
        endif
    endif
endfunction

autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
highlight VertSplit ctermbg=NONE
highlight VertSplit ctermfg=NONE
let g:NERDTreeWinPos = "right"


autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

map <C-d> :NERDTreeMirrorToggle<CR>
map <C-f> :NERDTreeFind<CR>

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeDirArrowExpandable = '‚ñ∏'
let g:NERDTreeDirArrowCollapsible = '‚ñæ'

function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

  call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
" nerdtree ends

" nerdtree git plugin begins
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ "Unknown"   : "?"
    \ }
" nerdtree git plugin ends

" syntastic begins
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

function! StrTrim(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction
let g:syntastic_html_tidy_exec = 'tidy5'
let g:syntastic_javascript_checkers = ['eslint']
let b:syntastic_javascript_eslint_exec = StrTrim(system('npm-which eslint'))

let g:syntastic_markdown_mdl_exec = 'markdownlint'
let g:syntastic_markdown_mdl_args = ''
" syntastic ends

" NERDTreeTabs begins
let g:nerdtree_tabs_focus_on_files = 1
let g:nerdtree_tabs_smart_startup_focus = 2
" NERDTreeTabs ends

" vim-NERDTree-syntax-hightlight begins
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['md'] = "CC6666"
" vim-NERDTree-syntax-highlight ends

" easymotion setting begins
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_underbar_completion = 1
" easymotion setting ends


" Markdown

au BufRead,BufNewFile *.md setlocal textwidth=80
autocmd Filetype markdown setlocal wrap
autocmd Filetype markdown setlocal linebreak
autocmd Filetype markdown setlocal nolist
autocmd Filetype markdown setlocal columns=200
